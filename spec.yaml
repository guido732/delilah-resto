swagger: "2.0"

info:
  title: Delilah Resto
  description: >-
    Food store backend API.
  version: 1.0.0
  contact:
    email: "guido732@gmail.com"

externalDocs:
  description: Github Repository
  url: "https://github.com/guido732/delilah-resto"

host: localhost:3000

basePath: /v1

tags:
  - name: User
    description: Operations about user
  - name: Products
    description: Everything about products
  - name: Orders
    description: Everything about orders

schemes:
  - https
  # - http

paths:
  /users:
    post:
      tags:
        - User
      summary: Create user
      description: Creates a new User in the DataBase
      operationId: createUser
      produces:
        # - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: successful operation
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /users/update:
    put:
      tags:
        - User
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Token"
            type: object
            properties:
              data:
                $ref: "#/definitions/User"
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
  /users/delete:
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Token to validate deletion of user
          required: true
          schema:
            $ref: "#/definitions/Token"
      responses:
        "200":
          description: Username deleted correctly
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /users/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username or email
          in: query
          description: The user name or email for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
      # parameters: []
      responses:
        default:
          description: successful operation
  "/users/:username":
    get:
      tags:
        - User
      summary: Get user by user name (only Admin)
      description: ""
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched."
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - User
      summary: Updated user  (only Admin)
      description: This can only be done by an admin logged in.
      operationId: updateUserAdmin
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Token"
              - type: object
                properties:
                  data:
                    $ref: "#/definitions/User"
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - User
      summary: Delete user  (only Admin)
      description: This can only be done by a logged in admin.
      operationId: deleteUserAdmin
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "200":
          description: Username deleted correctly
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /products:
    get:
      tags:
        - Products
      summary: Get list of products
      description: "Returns a list of products"
      operationId: getProducts
      parameters:
        - in: query
          name: search
          type: string
          description: Keywords to search for
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Products"
    post:
      tags:
        - Products
      summary: Adds a product
      description: "Adds a product to database"
      operationId: addProduct
      parameters:
        - in: body
          name: search
          description: Keywords to search for
          required: true
          schema:
            $ref: "#/definitions/Product"
      produces:
        - application/json
      responses:
        "200":
          description: Product added succesfully
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: Error validating input data
  "/products/:id":
    get:
      tags:
        - Products
      summary: Gets product by Id
      description: "Returns a specific product detail, fetched by it's ID"
      operationId: getProductById
      produces:
        - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Product"
        "403":
          description: Forebidden - no access token
        "404":
          description: Product not found
    put:
      tags:
        - Products
      summary: Gets product by Id
      description: "Edits a specific product"
      operationId: editProduct
      parameters:
        - in: body
          name: body
          description: Admin Token + modification data
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Token"
              - type: object
                properties:
                  data:
                    $ref: "#/definitions/Product"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: Forebidden - no access token
        "404":
          description: Product not found
    delete:
      tags:
        - Products
      summary: Gets product by Id
      description: "Returns a specific product detail, fetched by it's ID"
      operationId: deleteProduct
      parameters:
        - in: body
          name: body
          description: Admin Token
          required: true
          schema:
            $ref: "#/definitions/Token"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
  /orders:
    get:
      tags:
        - Orders
      summary: Get list of orders
      description: "Returns a list of products"
      operationId: getOrders
      parameters:
        - in: query
          name: limit
          type: string
          description: Limit of entries to return
        - in: query
          name: offset
          type: string
          description: Offset from return list (0 based)
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Orders"
    post:
      tags:
        - Orders
      summary: Adds a product
      description: "Adds a product to database"
      operationId: addOrder
      parameters:
        - in: body
          name: order
          description: Order to create
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Order"
              - $ref: "#/definitions/Token"
      produces:
        - application/json
      responses:
        "200":
          description: Order added succesfully
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid data supplied
        "405":
          description: Error validating input data
  "/orders/:id":
    get:
      tags:
        - Orders
      summary: Gets product by Id
      description: "Returns a specific product detail, fetched by it's ID"
      operationId: getOrderById
      produces:
        - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Product"
        "403":
          description: Forebidden - no access token
        "404":
          description: Product not found
    put:
      tags:
        - Orders
      summary: Gets product by Id
      description: "Edits a specific product"
      operationId: editOrder
      parameters:
        - in: body
          name: body
          description: Admin Token + modification data
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Token"
            type: object
            properties:
              data:
                $ref: "#/definitions/Product"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
        "403":
          description: Forebidden - no access token
        "404":
          description: Product not found
    delete:
      tags:
        - Orders
      summary: Gets product by Id
      description: "Returns a specific product detail, fetched by it's ID"
      operationId: deleteOrder
      parameters:
        - in: body
          name: body
          description: Admin Token
          required: true
          schema:
            $ref: "#/definitions/Token"
      produces:
        - application/json
      responses:
        "200":
          description: successful operation

securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: implicit
    scopes:
      "write:pets": modify pets in your account
      "read:pets": read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 100
      username:
        type: string
        example: ghee_dough
      password:
        type: string
        example: MySecretPass123
      email:
        type: string
        example: gheedough@gmail.com
      deliveryAddress:
        type: string
        example: Fake St. 123
      fullName:
        type: string
        example: Guido Torres
      phone:
        type: integer
        example: 5491122223333
  Product:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Avocado Toast
      price:
        type: number
        example: 268.5
      imgUrl:
        type: string
        example: https://via.placeholder.com/150
      description:
        type: string
        example: A thick, crusty, toastd rye bread toast with an avocado mix on top with spices
  Products:
    type: array
    items:
      $ref: "#/definitions/Product"
  Order:
    type: object
    properties:
      id:
        type: integer
        example: 1
      client:
        type: integer
        example: 1
      data:
        $ref: "#/definitions/Products"
      total:
        type: integer
        example: 666
      paymentMethod:
        type: string
        example: cash
      status:
        type: string
        example: preparing

  Orders:
    type: array
    items:
      $ref: "#/definitions/Order"
  Token:
    type: object
    properties:
      token:
        type: string
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
